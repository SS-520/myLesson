【レッスン3】
https://share.cryptozombies.io/jp/lesson/3/share/%E3%82%BE%E3%83%B3%E3%83%93001%E5%8F%B7

pragma solidity ^0.4.19;

//このコントラクトの作成者（オーナー）だけが関数を使用できるようにする
import "./ownable.sol";

//function Ownable()を継承したコンストラクタにする

contract ZombieFactory is Ownable {

    event NewZombie(uint zombieId, string name, uint dna);

    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;
	uint cooldownTime = 1 days;
		//ゾンビの捕食クールタイムを1日間隔と宣言

    struct Zombie {
        string name;
        uint dna;
		uint32 level;
        uint32 readyTime;
		//ゾンビにuint32倍とでレベルとクールタイムの概念付与
    }

    Zombie[] public zombies;

    mapping (uint => address) public zombieToOwner;
    mapping (address => uint) ownerZombieCount;

    function _createZombie(string _name, uint _dna) internal {

        uint id = zombies.push(Zombie(_name, _dna, 1, uint32(now + cooldownTime))) - 1;
			//レベルは1（初期値）
			//クールタイムは現在時刻+1日

        zombieToOwner[id] = msg.sender;
        ownerZombieCount[msg.sender]++;
        NewZombie(id, _name, _dna);
    }

    function _generateRandomDna(string _str) private view returns (uint) {
        uint rand = uint(keccak256(_str));
        return rand % dnaModulus;
    }

    function createRandomZombie(string _name) public {
        require(ownerZombieCount[msg.sender] == 0);
        uint randDna = _generateRandomDna(_name);
        randDna = randDna - randDna % 100;
        _createZombie(_name, randDna);
    }

}



//実際の開発環境だと別タブになる

pragma solidity ^0.4.19;

import "./zombiefactory.sol";

contract KittyInterface {
	function getKitty(uint256 _id) external view returns (
		bool isGestating,
		bool isReady,
		uint256 cooldownIndex,
		uint256 nextActionAt,
		uint256 siringWithId,
		uint256 birthTime,
		uint256 matronId,
		uint256 sireId,
		uint256 generation,
		uint256 genes
  );
}

contract ZombieFeeding is ZombieFactory {


		//address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;

			//クリプトキティーズのコントラクトのアドレス
			//ハードコードなのでよろしくない
			//でもコードは必要なので代わりの関数を設定

		KittyInterface kittyContract;
			//KittyInterface型変数kittyContractを宣言

		function setKittyContractAddress(address _address) external onlyOwner {
				//extarnal:誰でも呼び出せる
				//書き換えられたら困るのでオーナーだけアクセスできるようにする

			kittyContract = KittyInterface(_address);
				//kittyContractって名前のKittyInterfaceを作成 
				//KittyInterfaceの引数を_addressとする

		}
	

			//KittyInterface kittyContract = KittyInterface(ckAddress);
				//kittyContractって名前のKittyInterfaceをsakusei 
				//初期値をckAddressとして初期化
				//ckAddressで固定してた時のだから使わず↑に入れ込む


//クールタイム用の関数を定義
	function _triggerCooldown(Zombie storage _zombie) internal {
			//引数をZombie storageポインタの_zombieを取る

		_zombie.readyTime = uint32(now + cooldownTime);
			//クールタイムは現在時刻+1日を待機時間にする

	}

//クールタイムを過ぎてるか否かの判別関数
	function _isReady(Zombie storage _zombie) internal view returns (bool) {
			//引数をZombie storageポインタの_zombieを取る
			//戻り値はtrue/false

		return (_zombie.readyTime <= now);
			//(_zombie.readyTime <= now)ならtrue
			//(_zombie.readyTime > now)ならfalseを返す

	}


	function feedAndMultiply(uint _zombieId, uint _targetDna, string _species) internal {
			//feedOnKittyしか使わないからpublicの必要ないね？→internalに変更

		require(msg.sender == zombieToOwner[_zombieId]);
		Zombie storage myZombie = zombies[_zombieId];

		require(_isReady(myZombie));
			//_isReady()が真なら以下続行
			//_isReady()の引数はZombie storage（ここではmyZombie）
			//この関数を呼び出すfeedOnKittyに入れられた_zombieIdがラベルのzombie[]の情報が引き渡される

		_targetDna = _targetDna % dnaModulus;
		uint newDna = (myZombie.dna + _targetDna) / 2;

			if (keccak256(_species) == keccak256("kitty")) {
				newDna = newDna - newDna % 100 + 99;
		    }
		
		_createZombie("NoName", newDna);
		_triggerCooldown(myZombie);
			//この捕食をトリガーにクールタイム終了の時間を決める
	}


	function feedOnKitty(uint _zombieId, uint _kittyId) public {
		uint kittyDna;
		(,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);
		feedAndMultiply(_zombieId, kittyDna, "kitty");
	}

}



//ヘルパーメソッドとしてzombiehelper.solコントラクトを作成
//zombiefeedingコントラクトを継承したコンストラクト


pragma solidity ^0.4.19;

import "./zombiefeeding.sol";

contract ZombieHelper is ZombieFeeding {


	//渡したレベル以上なら関数の中身を実行できる修飾子
	
	modifier aboveLevel(uint _level, uint _zombieId) {

		require(zombies[_zombieId].level >= _level);
			//zombies[]のラベル_zombieIdに格納された情報の内levelを引っ張ってくる
			//参照したlevelが関数引数の_levelより高かったら以下実行
		_;	//残りの関数を呼び出す

	}
	
	
	//一定レベル以上なら名前を変えられる
	
	function changeName(uint _zombieId, string _newName) external aboveLevel(2, _zombieId) {
			//aboveLevelを修飾子にすることで、指定レベル以上で以下の内容を実行可能にする
			//_zombieIdのlevelが2以上なら実行可能「
			//関数の引数として_zombieIdと付けたい名前を渡す
			
		require(msg.sender == zombieToOwner[_zombieId]);
			//この関数を呼び出したアカウントのアドレスと
			//この_zombieIdがラベルになってるzombieToOwner[]の中身のアドレスが一致してたら以下実行
			//※実行者と所有者が一致したときだけ実行
			
		zombies[_zombieId].name = _newName;
			//_zombieIdがラベルになってるzombieToOwner[]の中身の内、name情報を_newNameに書き換える
		
	}
	
	
	//一定レベル以上ならDNAを変えられる
	
	function changeDna(uint _zombieId, uint _newDna) external aboveLevel(20, _zombieId) {
			//ゾンビのレベルが20以上なら実行可能
			//任意のDNAを渡す
	
		require(msg.sender == zombieToOwner[_zombieId]);
		zombies[_zombieId].dna = _newDna;
	
	}
	
	//手持ちのゾンビ軍団一覧を見る関数
	
	function getZombiesByOwner(address _owner) external view returns (uint[]) {
			//view関数（それも外部からのみのextarnal）にすることで、実行時のガスコストを不要とする
			//書き込むわけではなく一覧を閲覧したいだけだからviewでOK
			//戻り値はuint[]配列
		
		uint[] memory result = new uint[](ownerZombieCount[_owner]);
			//uint型配列resultをmemory内に作成
			//配列の長さはオーナー所有のゾンビの数ownerZombieCount[_owner]
			
			
			//最初からzombieToOwner各要素としてゾンビの情報を渡しておけば楽
			//ではあるが、書き込む量・譲渡時の変更量が膨大になる
			//→通常はzombieToOwnerの要素は作成者のアドレスだけにしとく
			
		uint counter = 0;
			//配列resultのインデックスに使用
		
		for (uint i = 0; i < zombies.length; i++){
				//i=0スタートのzombies配列の長さまで繰り返し
			if (zombieToOwner[i] == _owner) {
					//ラベル=ゾンビIDがzombieToOwner[i]の中身のアドレスと_ownerのアドレスが一致したら実行
				
				result[counter] = i;
					//result配列の中身にゾンビIDを追加する
					// i ≒ _zombieIdだからresult配列の中身がiでOK
				counter++;
					//インデックス番号用のcounterをカウントアップ
			
			}
			
		}
			
		return result();
			//配列resultの中身を返す
	}
	
}
