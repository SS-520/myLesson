【レッスン4】


//******
//Ownableコントラクタ
//コントラクトが最初に作成された時に、1度だけ実行される

contract Ownable {
	address public owner;
	event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


	//ownerを、このコンストラクタを実行した人のスマコンアドレスに設定する
	function Ownable() public {
		owner = msg.sender;
	}


   //その関数の実行者がownerであれば内容を実行
   
	modifier onlyOwner() {
		require(msg.sender == owner);
		_;
	}


	//引数に入力されたアドレスにオーナー権を譲渡する
	
	function transferOwnership(address newOwner) public onlyOwner {
	
		require(newOwner != address(0));
		OwnershipTransferred(owner, newOwner);
		owner = newOwner;
	}

}


//******

pragma solidity ^0.4.19;

//このコントラクトの作成者（オーナー）だけが関数を使用できるようにする
import "./ownable.sol";

//function Ownable()を継承したコンストラクタにする
//ゾンビ工場構造体

contract ZombieFactory is Ownable {

    event NewZombie(uint zombieId, string name, uint dna);

    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;
	uint cooldownTime = 1 days;


    struct Zombie {
        string name;
        uint dna;
		uint32 level;
        uint32 readyTime;
        uint16 winCount;
        uint16 lossCount;
        	//ゾンビの勝敗件数を、ゾンビごとに持たせる
        	//2^8=256,2^16=65536なので、1日1回（クールタイムより）
        	//16バイト格納できるようにしておく
    }

    Zombie[] public zombies;

    mapping (uint => address) public zombieToOwner;
    mapping (address => uint) ownerZombieCount;

    function _createZombie(string _name, uint _dna) internal {

        uint id = zombies.push(Zombie(_name, _dna, 1, uint32(now + cooldownTime), 0, 0)) - 1;
        	//新規ゾンビの情報を
	        	//name = _name
	        	//dna = _dna
	        	//level = 1
	        	//readyTime = 現在+1日後の時間
        	//に加え
        		//winCount = 0
				//lossCount = 0
			//として作成

        zombieToOwner[id] = msg.sender;
        ownerZombieCount[msg.sender]++;
        NewZombie(id, _name, _dna);
    }

    function _generateRandomDna(string _str) private view returns (uint) {
        uint rand = uint(keccak256(_str));
        return rand % dnaModulus;
    }

    function createRandomZombie(string _name) public {
        require(ownerZombieCount[msg.sender] == 0);
        uint randDna = _generateRandomDna(_name);
        randDna = randDna - randDna % 100;
        _createZombie(_name, randDna);
    }

}


//******
//実際の開発環境だと別タブになる


pragma solidity ^0.4.19;

import "./zombiefactory.sol";

//餌の子猫のインターフェースコントラクト
contract KittyInterface {
	function getKitty(uint256 _id) external view returns (
		bool isGestating,
		bool isReady,
		uint256 cooldownIndex,
		uint256 nextActionAt,
		uint256 siringWithId,
		uint256 birthTime,
		uint256 matronId,
		uint256 sireId,
		uint256 generation,
		uint256 genes
  );
}



//ゾンビに餌をあげるコントラクト
contract ZombieFeeding is ZombieFactory {

		KittyInterface kittyContract;	//kittyContractはKittyInterfaceの名前です
		
		
	//特定のゾンビを使用するアカウントが、そのゾンビのオーナーかどうか判定するよ！
		modifier ownerOf(uint _zombieId) {
		
			require(msg.sender == zombieToOwner[_zombieId]);
				//この関数を呼び出したアカウントアドレスが
				//使いたいゾンビ_zombieIdがラベルのzombieToOwnerの中身と一致してたら以下続行
			_;
					
		}
		
		
//KittyInterfaceを作成

		function setKittyContractAddress(address _address) external onlyOwner {

			kittyContract = KittyInterface(_address);
			

		}

//クールタイム用の関数を定義
	function _triggerCooldown(Zombie storage _zombie) internal {

		_zombie.readyTime = uint32(now + cooldownTime);
	}

//クールタイムを過ぎてるか否かの判別関数
	function _isReady(Zombie storage _zombie) internal view returns (bool) {

		return (_zombie.readyTime <= now);

	}

//捕食・増加ファンクション

	function feedAndMultiply(uint _zombieId, uint _targetDna, string _species) internal ownerOf(_zombieId) {
			//ownerOf修飾子を使うことで、
			//数_zombieIdのオーナーとこの関数の呼び出し者のアドレスが一致しなければ
			//以下続行不可能

		Zombie storage myZombie = zombies[_zombieId];
		
		require(_isReady(myZombie));

		_targetDna = _targetDna % dnaModulus;
		uint newDna = (myZombie.dna + _targetDna) / 2;

			if (keccak256(_species) == keccak256("kitty")) {
				newDna = newDna - newDna % 100 + 99;
		    }
		
		_createZombie("NoName", newDna);
		_triggerCooldown(myZombie);

	}


	function feedOnKitty(uint _zombieId, uint _kittyId) public {
		uint kittyDna;
		(,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);
		feedAndMultiply(_zombieId, kittyDna, "kitty");
	}

}


//******
//ヘルパーメソッドとしてzombiehelper.solコントラクトを作成
//zombiefeedingコントラクトを継承したコンストラクト


pragma solidity ^0.4.19;

import "./zombiefeeding.sol";

contract ZombieHelper is ZombieFeeding {


	//レベルアップに必要な手数料(ether)を宣言
	uint levelUpFee = 0.001 ether;
	


	//渡したレベル以上なら関数の中身を実行できる修飾子
	
	modifier aboveLevel(uint _level, uint _zombieId) {

		require(zombies[_zombieId].level >= _level);
		_;

	}
	
	
	//Etherをコントラクトから引き出す
	
	
	function withdraw() external onlyOwner {
				//外部コントラクトからオーナーだけが実行可能
		
		owner.transfer(this.balance);
				//オーナーのアドレスにEtherを送る
				//引き出し元this.balance＝コントラクトに溜まってるEtherの残高
		
	}
	
	
	//コントラクト所有者がレベルアップ手数料を設定でるようにする
	
	function setLevelUpFee(uint _fee) external onlyOwner {
				//オーナーだけが外部から呼び出せる関数
				//新しい手数料を引数にする
				
		levelUpFee = _fee;
				//levelUpFeeを_feeに上書きする
	
	}
	
	
	
	
	//レベルアップする関数
	
	function levelUp(uint _zombieId) external payable {
			//引数はゾンビID
	
		require(msg.value == levelUpFee);
			//コントラクトに送るEtherは↑で宣言した手数料分
		zombies[_zombieId].level++;
			//手数料が送られたらzombies配列のラベル_zombieIdの中身・levelの部分を1増やす
	
	}
	
	
	//一定レベル以上なら名前を変えられる
	
	function changeName(uint _zombieId, string _newName) external aboveLevel(2, _zombieId) ownerOf(_zombieId) {
			//ゾンビの所有者だけができるのでownerOf(_zombieId)を足す
		zombies[_zombieId].name = _newName;
		
	}
	
	
	//一定レベル以上ならDNAを変えられる
	
	function changeDna(uint _zombieId, uint _newDna) external aboveLevel(20, _zombieId) ownerOf(_zombieId) {
			//ゾンビの所有者だけができるのでownerOf(_zombieId)を足す
		
		zombies[_zombieId].dna = _newDna;
	
	}
	
	//手持ちのゾンビ軍団一覧を見る関数
	
	function getZombiesByOwner(address _owner) external view returns (uint[]) {
		
		uint[] memory result = new uint[](ownerZombieCount[_owner]);
		uint counter = 0;

		
		for (uint i = 0; i < zombies.length; i++){

			if (zombieToOwner[i] == _owner) {
				
				result[counter] = i;
				counter++;
			
			}
			
		}
			
		return result();
	}
	
}


//******
//バトル機能用のファイル・コントラクトを作成


pragma solidity ^0.4.19;

import "./zombiehelper.sol";


//ZombieHelperコントラクトを継承
contract ZombieBattle is ZombieHelper {


	

	uint randNonce = 0;		//ランダム生成の下準備
	uint attackVictoryProbability = 70;		//ゾンビバトルの勝率
	
	
//ランダムに数値を生成する
	
	funcrion randMod (uint _modulus) internal returns (uint) {
			//uint型_modulusを引数にuintを返す関数
		
		randNonce++;
			//randNonceを1増やす
			
		return uint(keccak256(now, msg.sender, randNonce)) % _modulus;
			//now, msg.sender, randNonceをkeccak256型ハッシュ値変換
			//変換値をuint型に変換
			//変換結果を 0~_(modulus-1)までの整数に変換
			//%(自然数)でその自然数で割った余りを返す
	
	}
	
	
//ゾンビが攻撃する関数
	
	function attack(uint _zombieId, uint _targetId) external ownerOf(_zombieId) {
			//自ゾンビのIDとターゲットのIDを引数
			//攻撃ゾンビのオーナーが関数呼び出し者と一致したら実行
	
		Zombie storage myZombie = zombies[_zombieId];
		Zombie storage enemyZombie = zombies[_targetId];
		
			//storageに永久保存でポインタゲットでやり取りを簡単にする
			//myZombieに自ゾンビの情報を定義
			//enemyZombieに相手ゾンビの情報を定義
			//情報はzombies配列から取得
			
		uint rand = randMod(100);
			//勝敗を決める（7割で自分が勝利）
			//勝敗を決める乱数を、引数を100（戻り値は00～99）にしてrandMod(uint)から呼び出し

		
		//勝敗の確認
		
		if (rand <= attackVictoryProbability) {
				//↑で生成した乱数が勝率以内なら勝利
		
			myZombie.winCount++;
				//zombies配列ラベル_zombieIdであるmyZombieに含まれる要素・winCountを1増加
				
			myZombie.level++;
				//zombies配列ラベル_zombieIdであるmyZombieに含まれる要素・levelを1増加
				
			enemyZombie.lossCount++;
				//zombies配列ラベル_targetIdであるenemyZombieに含まれる要素・lossCountを1増加
				
			
			
			//勝ったからゾンビを増やす
			
			feedAndMultiply(_zombieId, enemyZombie.dna, "zombie");
					//引数 親：_zombieId
					//　　 餌：enemyZombie.dna
					//　　 種："zombie"（文字列なので""で囲む）
					

		//ここまで勝利

		} else {
		
		//ここから敗北
		
			myZombie.lossCount++;
				//zombies配列ラベル_zombieIdであるmyZombieに含まれる要素・lossCountを1増加
			
			enemyZombie.winCount++;
				//zombies配列ラベル_targetIdであるenemyZombieに含まれる要素・winCountを1増加
				
		}	
		//勝利判別と結果処理終了
		
		
		_triggerCooldown(myZombie);
				//myZombieのクールタイムを更新	
	
	}

}
