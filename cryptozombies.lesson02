//【レッスン2】
//https://share.cryptozombies.io/jp/lesson/2/share/%E3%82%BE%E3%83%B3%E3%83%93001%E5%8F%B7

pragma solidity ^0.4.19;

//メインコンストラクト
contract ZombieFactory {

    event NewZombie(uint zombieId, string name, uint dna);

    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;

//基本のストラクト（構造体）

    struct Zombie {
        string name;
        uint dna;
    }

//必要な配列を定義するターン

    Zombie[] public zombies;

    mapping (uint => address) public zombieToOwner;
			//zombieToOwnerという連結収納容器の各ラベルがuint,中身がaddress
			//uintをラベルにして、addressを格納

    mapping (address => uint) ownerZombieCount;
			//ownerZombieCountという連結収納容器の各ラベルがaddress,中身がuint
			//addressをラベルにして、uintを格納　


//処理①

    //function _createZombie(string _name, uint _dna) private {	
	function _createZombie(string _name, uint _dna) internal {
			//private→internalに変更で継承コンストラクトでも呼び出し可能
		
        uint id = zombies.push(Zombie(_name, _dna)) - 1;

        zombieToOwner[id] = msg.sender;
			//mapping:zombieToOwnerを更新
			//作ったゾンビのIDをラベルにして、関数を呼び出したアカウントのアドレスを格納

        ownerZombieCount[msg.sender]++;
			//関数を呼び出したアカウントのアドレスをラベルにして、初期値0で整数を格納
			//++で次に格納する整数をカウントアップ
			//実質「ゾンビを1体作ったら1カウントを増やし」た数を収納するだけ



        NewZombie(id, _name, _dna);
    } 


//処理②

    function _generateRandomDna(string _str) private view returns (uint) {
        uint rand = uint(keccak256(_str));
        return rand % dnaModulus;
    }


//メインの処理

    function createRandomZombie(string _name) public {
	require(ownerZombieCount[msg.sender] == 0);
			//ownerZombieCount[msg.sender]が0以外はエラーを返す
			//ここの処理の時点ではownerZombieCount[msg.sender]初期値（0）

		//処理②の中身を実行
        uint randDna = _generateRandomDna(_name);

		//処理①の中身実行
        _createZombie(_name, randDna);
			//処理①中にownerZombieCount[msg.sender]++が処理される
    }

}


//ここから継承コンストラクトの中身
//実際の開発環境だと別タブになる

import "./zombiefactory.sol";	//同ディレクトリのzombiefactory.solを読み込む


	//他人のスマートコントラクトからデータを貰ってきたい
	//他所にアクセスするためにインターフェースを設定する

	contract KittyInterface {
		function getKitty(uint256 _id) external view returns (
			bool isGestating,
			bool isReady,
			uint256 cooldownIndex,
			uint256 nextActionAt,
			uint256 siringWithId,
			uint256 birthTime,
			uint256 matronId,
			uint256 sireId,
			uint256 generation,
			uint256 genes
		);
		//ほかのコントラクトに入っている関数はgetKittyインターフェースですよ～と設定するだけ
			//中身は餌なお猫様についての変数一式
		//{}を使わず;で締める
	}


contract ZombieFeeding is ZombieFactory {
		//ZombieFactoryコントラクトを継承したZombieFeedingコントラクト


		address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;
			//クリプトキティーズのコントラクトのアドレス
	
		KittyInterface kittyContract = KittyInterface(ckAddress);
			//kittyContractって名前のKittyInterfaceをsakusei 
			//初期値をckAddressとして初期化
		



//餌を与える＝DANを掛け合わせて新しいゾンビを生み出す関数
//処理③

	function feedAndMultiply(uint _zombieId, uint _targetDna, string _species) public {
		//引数string型_speciesを追加


		require(msg.sender == zombieToOwner[_zombieId]);
			//この関数を呼び出したアカウントが、このゾンビのオーナーか確認
			//msg.senderが、このゾンビのIDをラベルにしたzombieToOwnerの中身と一致すればOK

	//元のゾンビのdnaと餌のdnaの平均が新しいゾンビdna

		//元のゾンビのdnaを取得

    	Zombie storage myZombie = zombies[_zombieId];
			//Zombie型配列zombiesのインデックス番号_zombieIdの中身（_namme, _dna）を、
			//Zombie型変数myZombieの中身にする
				//→myZombie.dnaでこのゾンビのdnaが取得可能

		//餌のdnaを16桁で取得
		_targetDna = _targetDna % dnaModulus;
				//_targetDnaを16桁にする（16桁か確認）

		//平均を出したら新しいゾンビのdnaになる
		uint newDna = (myZombie.dna + _targetDna) /　2;
				//新しいゾンビのDNA:uint型newDnaを、餌のDNAと捕食ゾンビのDANの平均で求める


		if (keccak256(_species) == keccak256("kitty")) {
		newDna = newDna - newDna % 100 + 99;;

			//もし種族のkeccak256と子猫のkeccak256が一致するなら
			//↑で作成したnewDnaの最後の2桁を99にする
			//解説: newDna を334455と仮定
			//newDna % 100 は 55、newDna - newDna % 100 は334400
			//最後に 99を追加→334499

		}


		_createZombie("NoName", newDna);
				//引数をNoName,newDnaにして_createZombie関数を呼び出して作成
				//"NoName"はString型の文字列のため""で囲む
				//_createZombieはcontract ZombieFactoryのprivate関数
				//継承したコンストラクトでも使えるようにprivate→internalに変更

	}
	
//餌のDNAを取り出して餌を与えて新しいゾンビを作る
	function feedOnKitty(uint _zombieId, uint _kittyId) public {
		//引数_zombieId,_kittyIdの関数

		uint kittyDna;
			//kittyDnaをuint型として宣言

		(,,,,,,,,,kittyDna) = kittyContract.getKitty(_kittyId);
			//_kittyIdを引数にkittyContract.getKittyを呼び出し
			//戻り値の内10番目のgeneだけkittyDnaとして取り出すのでカンマで必要箇所だけ記述

		feedAndMultiply(_zombieId, kittyDna,"kitty");
			//_zombieId, kittyDna,"kitty"を引数にfeedAndMultiplyを呼び出す
			//処理③

	}


}
