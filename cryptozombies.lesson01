// 【ゾンビ001号】
// https://share.cryptozombies.io/jp/lesson/1/share/%E3%82%BE%E3%83%B3%E3%83%93001%E5%8F%B7

pragma solidity ^0.4.19;	//solidityのver.0.4.19

contract ZombieFactory {	//ゾンビ軍団生成のためのZombieFactoryコントラクト
				//名前(_name)を決めればランダムにDNAを生成して軍団配列に格納していく

    event NewZombie(uint zombieId, string name, uint dna);
				//イベントNewZombieを宣言
				//引数はID・name・dnaの3つ

    uint dnaDigits = 16;	//ゾンビのDNAは16桁の数字で決まる
    uint dnaModulus = 10 ** dnaDigits;	//(任意の数)%dnaModulusｄで数を16桁に縮小できる（※）

    struct Zombie {	//Zombieストラクト（構造体）を定義
        string name;	//nameはstring
        uint dna;	//dnaはuint
    }

    Zombie[] public zombies;	//Zombie構造体パブリック配列・zombiesを作成

    function _createZombie(string _name, uint _dna) private {	//①
		//プライベート関数createZombie
		//プライベート関数なので関数名の前に"_"をつける
		//パラメータは_name (string)・dna (uint)

	uint id = zombies.push(Zombie(_name, _dna)) - 1;
		//_nameと_dnaを引数にして、結果をzombies配列に順次格納
		//Zombie.pushの格納数-1が新しいゾンビのID
		//↑2作業を1行で実行

	
	NewZombie(id, _name, _dna);
		//イベントNewZombie発生
		//id, _name, _dnaを引数
    } 

    function _generateRandomDna(string _str) private view returns (uint) {	//②
		//_strを引数にした読み取り専用のプライベート関数
		//戻り値はuint

        uint rand = uint(keccak256(_str));
		//引数_strのハッシュ関数keccak256をunit型に変換して変数randに格納
        return rand % dnaModulus;	//randを16桁に変換してから戻り値として表示（※）


    }

    function createRandomZombie(string _name) public{
		//引数_nameでパブリック関数createRandomZombieを実行
        uint randDna = _generateRandomDna(_name);
		//_nameを引数にして②で作った16桁の乱数をrandDnaに格納
        _createZombie(_name, randDna);
		//_nameとrandDnaを引数にして①で作ったZombie配列に格納
    }


}
