//レッスン06
//https://share.cryptozombies.io/jp/lesson/6/share/The_Phantom_of_Web3



<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>CryptoZombies front-end</title>
		<script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

		//Web3.jsを追加する
		<script language="javascript" type="text/javascript" src="web3.min.js"></script>
		
		//プロジェクトにcryptozombies_abi.jsのABIの定義をインポート設定
		<script language="javascript" type="text/javascript" src="cryptozombies_abi.js"></script>

	</head>
	<body>
		
		<div id="txStatus"></div>
		<div id="zombies"></div>

		<script>
		
		//初期化したコントラクトを格納する変数
		var cryptoZombies;
		
		
		//solidityのアドレスを格納するためvar型userAccount宣言
		var userAccount;
		
		
		
		
		//function startApp()を作成
		
		function startApp() {
		
			//ネット上のCryptoZombiesコントラクトのアドレスと
			//cryptoZombiesAddressを一致させる
			
			var cryptoZombiesAddress = "YOUR_CONTRACT_ADDRESS";
			
			//コントラクトをインスタンス化
			cryptoZombies = new web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);
			
			
			//METMASKのアカウントのチェック
			
			var accountInterval = setInterval(function() {
			
				if (web3.eth.accounts[0] !== userAccount) {
				
					userAccount = web3.eth.accounts[0];
						//↑で宣言したuserAccountにweb3.eth.accounts[0]格納
					
					
					//updateInterface()の代わりに
					//getZombiesByOwner()にuserAccountを引き渡す
					
					getZombiesByOwner(userAccount)
					.then(displayZombies);
				
				}
			
			}, 100);
		
		
			//cryptoZombiesコントラクトが初期化の確認
			cryptoZombies.events.Transfer({ filter: { _to: userAccount } })
			.on("data", function(event) {
				// `events`は、上でやったように反復可能な`event`配列内のオブジェクトである
				// このコードは、これまで生成された全ゾンビのリストを提供してくれる
				
				let data = event.returnValues;
				
				//UIを更新する
				getZombiesByOwner(userAccount).then(displayZombies);
				
			}).on("error", console.error);;
			

		
		
		}
		
		
		
		
		
		
		
		
		
		//ゾンビの画像表示
		function displayZombies(ids) {
		
				//#zombies divを空にする
				//（古いユーザーのデータをリセット）
			
			$("#zombies").empty();
			
				//所有ゾンビの全IDをループ
			
			for (id of ids) {
			
				getZombieDetails(id)
				.then(function(zombie) {
				
					// ES6の「テンプレート文字列」を使い、HTMLに変数をインジェクト。
					// それぞれを #zombies div に追加
				
					$("#zombies").append(`<div class="zombie">
						<ul>
							<li>Name: ${zombie.name}</li>
							<li>DNA: ${zombie.dna}</li>
							<li>Level: ${zombie.level}</li>
							<li>Wins: ${zombie.winCount}</li>
							<li>Losses: ${zombie.lossCount}</li>
							<li>Ready Time: ${zombie.readyTime}</li>
						</ul>
					</div>`);
				
				});
			
			}

		}
		
		
		function createRandomZombie(name) {
		
		
			// しばらく時間がかかるので、UIを更新してユーザーに
			// トランザクションが送信されたことを知らせる
			// "Creating new zombie on the blockchain. This may take a while..."を表示
			
			$("#txStatus").text("Creating new zombie on the blockchain. This may take a while...");
			
			
			// トランザクションをコントラクトに送信する:
			
			return cryptoZombies.methods.createRandomZombie(name)
			.send({ from: userAccount })
			.on("receipt", function(receipt) {
			
				$("#txStatus").text("Successfully created " + name + "!");
				// 成功："Successfully created " + name + "!"を表示
			
				// トランザクションがブロックチェーンに取り込まれた。UIをアップデートしよう
				getZombiesByOwner(userAccount).then(displayZombies);
				
			})
			.on("error", function(error) {
			
				// トランザクションが失敗したことをユーザーに通知するために何かを行う
				$("#txStatus").text(error);
				
			});
		}
		
		
		
		function feedOnKitty(zombieId, kittyId){
		
			// しばらく時間がかかるので、UIを更新してユーザーに
			// トランザクションが送信されたことを知らせる	
			// "Eating a kitty. This may take a while..."を表示
			$("#txStatus").text("Eating a kitty. This may take a while...");
			
			
			// トランザクションをコントラクトに送信する:
			
			//feedOnKittyを呼び出す
			return cryptoZombies.methods.feedOnKitty(zombieId, kittyId)
			.send({ from: userAccount })
			.on("receipt", function(receipt) {
			
				$("#txStatus").text("Ate a kitty and spawned a new Zombie!");
				//成功："Ate a kitty and spawned a new Zombie!"の文字の表示
			
				// トランザクションがブロックチェーンに取り込まれた。UIをアップデートしよう
				getZombiesByOwner(userAccount).then(displayZombies);
				
			})
			.on("error", function(error) {
			
				// トランザクションが失敗したことをユーザーに通知するために何かを行う
				$("#txStatus").text(error);
				
			});		

		}
		
		
		
		
		function levelUp(zombieId){
		
			// しばらく時間がかかるので、UIを更新してユーザーに
			// トランザクションが送信されたことを知らせる	
			// "Leveling up your zombie..."を表示
			$("#txStatus").text("Leveling up your zombie...");
			
			
			// トランザクションをコントラクトに送信する:
			
			//feedOnKittyを呼び出す
			return cryptoZombies.methods.levelUp(zombieId)
			.send({ from: userAccount, value: web3js.utils.toWei("0.001", "ether") })
			.on("receipt", function(receipt) {
			
				$("#txStatus").text("Power overwhelming! Zombie successfully leveled up");
				//成功："Ate a kitty and spawned a new Zombie!"の文字の表示
			
				// トランザクションがブロックチェーンに取り込まれた。UIをアップデートしよう
				//レベルアップしたゾンビは1体だけなので以下は不要（コメントアウト）
				//getZombiesByOwner(userAccount).then(displayZombies);
				
			})
			.on("error", function(error) {
			
				// トランザクションが失敗したことをユーザーに通知するために何かを行う
				$("#txStatus").text(error);
				
			});

		}
		
		
		
		
		
		
		//関数を呼び出す
		function getZombieDetails(id) {
			return cryptoZombies.methods.zombies(id).call();
		}
		
		
		
		//JaaScript zombieToOwner関数を定義
			//mapping (uint => address) public zombieToOwner;
			//引数：uint id
		
		function zombieToOwner(id) {
			return cryptoZombies.methods.zombieToOwner(id).call();
		}
		
		
		
		//JaaScript getZombiesByOwner関数を定義
			//function getZombiesByOwner(address _owner)
			//引数：ownerアドレス
			//ユーザーが所有している全ゾンビのIDを探す
			//※owner = solidityのアドレス
		
		function getZombiesByOwner(owner) {
			return cryptoZombies.methods.getZombiesByOwnerr(owner).call();
		}
		
		
		
		
		//Metamaskを検出するためのコード

		window.addEventListener('load', function() {
			//Web3がブラウザにインジェクトされていたら
		
			if (typeof web3 !== 'undefined') {	//'undefined'ではない
			
				web3js = new Web3(web3.currentProvider);
				//new Web3(web3.currentProvider)をweb3jsにセット
			
			} else {
			
				// ユーザーがweb3を持たない場合の対処
				// アプリを使用するためにMetamaskをインストールするよう
				// 伝えるメッセージを表示。
			
			}
		
			startApp()
		
		})


		</script>
	</body>
</html>




//CryptoKittiesコントラクトアドレス
//0x06012c8cf97BEaD5deAe237070F9587f8E7A266d
